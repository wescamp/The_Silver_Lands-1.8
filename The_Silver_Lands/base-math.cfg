#textdomain wesnoth-The_Silver_Lands
# $Id: base-math.cfg 5505 2009-10-07 00:49:30Z espreon $

# ********************** COMPOSITE OPERATIONS **********************

# Compares _VAR1 and _VAR2, and writes the minimum variable's value on _RESULT_VAR
#define VARIABLE_NUMERICAL_MINIMUM _VAR1 _VAR2 _RESULT_VAR
    [if]
        [variable]
            name={_VAR2}
            less_than=${_VAR1}
        [/variable]
        [then]
            [set_variable]
                name={_RESULT_VAR}
                value=${_VAR2}
            [/set_variable]
        [/then]
        [else]
            [set_variable]
                name={_RESULT_VAR}
                value=${_VAR1}
            [/set_variable]
        [/else]
    [/if]
#enddef

# Compares _VAR1 and _VAR2, and writes the maximum variable's value on _RESULT_VAR
#define VARIABLE_NUMERICAL_MAXIMUM _VAR1 _VAR2 _RESULT_VAR
    [if]
        [variable]
            name={_VAR2}
            greater_than=${_VAR1}
        [/variable]
        [then]
            [set_variable]
                name={_RESULT_VAR}
                value=${_VAR2}
            [/set_variable]
        [/then]
        [else]
            [set_variable]
                name={_RESULT_VAR}
                value=${_VAR1}
            [/set_variable]
        [/else]
    [/if]
#enddef

# Compares _VAL1 and _VAL2, which are two numeric literals, and writes the minimum amongst them
# onto _VAR; note that _VAL1 and _VAL2 are temporarily written onto variables so that the [variable]
# statement comparisons can be used effectively
#define GET_NUMERICAL_MINIMUM _VAL1 _VAL2 _VAR
    [set_variable]
        name=__temp_get_numerical_minimum.val1
        value={_VAL1}
    [/set_variable]
    [set_variable]
        name=__temp_get_numerical_minimum.val2
        value={_VAL2}
    [/set_variable]
    {VARIABLE_NUMERICAL_MINIMUM (__temp_get_numerical_minimum.val1) (__temp_get_numerical_minimum.val2) ({_VAR}) }
    [clear_variable]
        name=__temp_get_numerical_minimum
    [/clear_variable]
#enddef

# Compares _VAL1 and _VAL2, which are two numeric literals, and writes the maximum amongst them
# onto _VAR; note that _VAL1 and _VAL2 are temporarily written onto variables so that the [variable]
# statement comparisons can be used effectively
#define GET_NUMERICAL_MAXIMUM _VAL1 _VAL2 _VAR
    [set_variable]
        name=__temp_get_numerical_maximum.val1
        value={_VAL1}
    [/set_variable]
    [set_variable]
        name=__temp_get_numerical_maximum.val2
        value={_VAL2}
    [/set_variable]
    {VARIABLE_NUMERICAL_MAXIMUM (__temp_get_numerical_maximum.val1) (__temp_get_numerical_maximum.val2) ({_VAR})}
    [clear_variable]
        name=__temp_get_numerical_maximum
    [/clear_variable]
#enddef

# Gets the percentage value of _VAL versus _BVAL, and puts it on _VAR
# {_VAR} / 100 = {_VAL} / {_BVAL} => {_VAR} = 100{_VAL} / {_BVAL}
#define GET_%_FOR_1_OF_2 _VAL _BVAL _VAR
    [set_variable]
        name={_VAR}
        value=100
    [/set_variable]
    [set_variable]
        name={_VAR}
        multiply={_VAL}
    [/set_variable]
    [set_variable]
        name={_VAR}
        divide={_BVAL}
    [/set_variable]
#enddef

# Gets the _PVAL% of _BVAL, and writes it onto _VAR
# {_PVAL} / 100 = {_VAR} / {_BVAL} => {_VAR} = {_PVAL}{_BVAL} / 100
#define GET_1%_OF_2 _PVAL _BVAL _VAR
    [set_variable]
        name={_VAR}
        value={_PVAL}
    [/set_variable]
    [set_variable]
        name={_VAR}
        multiply={_BVAL}
    [/set_variable]
    [set_variable]
        name={_VAR}
        divide=100
    [/set_variable]
#enddef

#define ABS _VAR
    [if]
        [variable]
            name={_VAR}
            less_than=0
        [/variable]
        [then]
            [set_variable]
                name={_VAR}
                multiply=-1
            [/set_variable]
        [/then]
    [/if]
#enddef

# Stores the result of real division of $VAR1 by $VAR2
# in the $REC container (integer part as $REC.integer
# and decimal part as $REC.decimal).
#
# NOTE: all parameters must be unquoted literals
#define VARIABLE_REALDIV REC VAL1 VAL2
    [set_variables]
        name={REC}
        mode=replace
        [value]
            integer={VAL1}
            decimal={VAL1}
        [/value]
    [/set_variables]
    [set_variable]
        name="{REC}.integer"
        divide={VAL2}
    [/set_variable]
    [set_variable]
        name="{REC}.decimal"
        modulo={VAL2}
    [/set_variable]

    [set_variable]
        name="{REC}.real"
        value="${REC}.integer|.${REC}.decimal"
    [/set_variable]
#enddef
